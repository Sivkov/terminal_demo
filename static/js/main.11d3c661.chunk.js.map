{"version":3,"sources":["UserForm.js","ButtonsDisplay.js","WaitingServer.js","App.js","serviceWorker.js","index.js"],"names":["Table","styled","table","Button","button","Input","input","divStyle","fontSize","color","formStyle","textAlign","UserForm","props","phone","phoneIsValid","validatePhone","sum","sumIsValid","validateSum","state","phoneValid","sumValid","onPhoneChange","bind","onSumChange","handleSubmit","chooseService","stepBack","e","val","target","value","valid","this","setState","preventDefault","alert","steps","operator","onSubmit","style","mask","maskChar","onChange","pattern","placeholder","required","type","maxLength","minLength","onClick","React","Component","Img","img","ButtonsDisplay","payReciever","currentTarget","getAttribute","data-key","src","className","alt","WaitingServer","operationSuccess","setTimeout","length","clearTimeout","Waiting","duration","delay","iterationCount","Header","header","AppWrapper","div","App","payActive","mobile","nextPanel","step","prevState","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.11d3c661.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components'\r\nimport InputMask from 'react-input-mask';\r\n\r\nconst Table = styled.table`\r\n    width: 100%\r\n    text-align: right;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: calc(10px + 2vmin);\r\n    table-layout: fixed;   \r\n`\r\n\r\nconst Button = styled.button`\r\n  display: inline-block;\r\n  width: 15em;\r\n  font-size: 80%;\r\n  color: white;\r\n  text-shadow:none;\r\n  text-decoration: none;\r\n  text-align: center;\r\n  line-height: 1.1;\r\n  white-space: pre-line;\r\n \r\n  border: 1px solid;\r\n  border-color: none;\r\n  border-radius: 6px;\r\n  outline: none;\r\n  background: none;\r\n  box-shadow: inset rgba(156, 137, 137, 0.5) 1px 1px;\r\n\r\n  :hover {\r\n  background: rgba(156, 137, 137, 0.5)  \r\n}\r\n    :active {\r\n  color: rgb(255,255,255);\r\n  border-color: black ;\r\n}\r\n `\r\n\r\nconst Input= styled.input`\r\n\r\n font-size: 80%;\r\n color:'black'\r\n\r\n`\r\n\r\nconst divStyle = { \r\n    fontSize: '80%', \r\n    color:'black'\r\n}\r\n\r\nconst formStyle = { \r\n    textAlign: 'start'    \r\n}\r\n\r\nexport class UserForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let phone = props.phone;\r\n        let phoneIsValid = this.validatePhone(phone);\r\n        let sum = props.sum;\r\n        let sumIsValid = this.validateSum(sum);\r\n        this.state = { phone: phone, sum: sum, phoneValid: phoneIsValid, sumValid: sumIsValid };\r\n        this.onPhoneChange = this.onPhoneChange.bind(this);\r\n        this.onSumChange = this.onSumChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.chooseService = this.chooseService.bind(this)\r\n        this.stepBack = this.stepBack.bind(this)\r\n\r\n\r\n    }\r\n\r\n    validateSum(sum) {\r\n    return sum < 1001 & sum > 0;\r\n    }\r\n\r\n    validatePhone(phone) {\r\n    //тут можно усложнить регулярку для телефона, но пока для всего что прошло через паттерн -  TRUE\r\n        return true;\r\n    }\r\n\r\n    onSumChange(e) {\r\n        var val = e.target.value;\r\n        var valid = this.validateSum(val);\r\n        this.setState({ sum: val, sumValid: valid });\r\n    }\r\n\r\n    onPhoneChange(e) {\r\n        var val = e.target.value;\r\n        var valid = this.validatePhone(val);\r\n        this.setState({ phone: val, phoneValid: valid });\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (this.state.phoneValid == true && this.state.sumValid == true) {\r\n\r\n        this.chooseService()\r\n        }\r\n\r\n        if (this.state.phoneValid != true) {\r\n            alert(\"Проверьте ваш номер: \" + this.state.phone);\r\n        }\r\n\r\n        if (this.state.sumValid != true) {\r\n            alert(\"Уточните сумму платежа( не более 1000) \" + this.state.sum);\r\n        }\r\n    }\r\n\r\n      chooseService () {\r\n          this.props.steps( 1, this.props.operator, this.state.phone, this.state.sum)\r\n          \r\n      }\r\n\r\n      stepBack() {\r\n          this.props.steps(-1)\r\n      }\r\n\r\n\r\n      render() {\r\n  \r\n          return (\r\n           <form onSubmit={this.handleSubmit} style={formStyle}>\r\n              <h1>Выбран оператор {this.props.operator}</h1>\r\n              <Table>\r\n                  <tbody>              \r\n                        <tr>\r\n                          <td>\r\n                              <label>Номер телефона:</label>\r\n                          </td>\r\n                          <td>\r\n                                <InputMask {...this.props} mask=\"+7(999)999-99-99\" maskChar=\" \" style={divStyle}\r\n                                onChange={this.onPhoneChange}\r\n                                pattern={'[0-9\\(\\)\\+-]{16}'} \r\n                                placeholder={'+7(999)999-99-99'} \r\n                                required />                                 \r\n                          </td>\r\n                      </tr>\r\n                      <tr>\r\n                          <td><label>Сумма к оплате:</label>\r\n                          </td>\r\n                          <td>\r\n                                <Input type=\"tel\" \r\n                                    pattern={'[0-9]{1,4}'} \r\n                                    onChange={this.onSumChange}\r\n                                    placeholder={'не более 1000 рублей'} \r\n                                    maxLength={4} \r\n                                    minLength={1} \r\n                                    required>\r\n                                </Input>\r\n                            </td>\r\n                      </tr>\r\n                     </tbody>\r\n                </Table>\r\n                <p></p>\r\n                <Button type=\"button\" onClick={this.stepBack}><h2>Назад</h2></Button>\r\n                <Button type=\"submit\"><h2>Подтвeрдить</h2></Button>\r\n            </form>\r\n         );\r\n  }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst Img = styled.img`\r\n  padding: 0.7em 0;\r\n  height: 40vmin;\r\n `\r\n\r\nconst Button = styled.button`\r\n  display: inline-block;\r\n  width: 15em;\r\n  font-size: 80%;\r\n  color: white;\r\n  text-shadow:none;\r\n  text-decoration: none;\r\n  text-align: center;\r\n  line-height: 1.1;\r\n  white-space: pre-line;\r\n  padding: 0.7em 0;\r\n  border: 1px solid;\r\n  border-color: none;\r\n  border-radius: 6px;\r\n  outline: none;\r\n  background: none;\r\n  box-shadow: inset rgba(156, 137, 137, 0.5) 1px 1px;\r\n\r\n  :first-line{\r\n  font-size: 170%;\r\n  font-weight: 700;\r\n}\r\n  :hover {\r\n  background: rgba(156, 137, 137, 0.5)  \r\n}\r\n    :active {\r\n  color: rgb(255,255,255);\r\n  border-color: black ;\r\n}\r\n `\r\nexport class ButtonsDisplay extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { payReciever: '' };\r\n        this.chooseService = this.chooseService.bind(this)\r\n    }\r\n\r\n    chooseService (e) {\r\n      this.setState({\r\n         payReciever: e.currentTarget.getAttribute('data-key')\r\n      })\r\n\r\n      this.props.steps(1,e.currentTarget.getAttribute('data-key') )\r\n   }\r\n\r\n  render() {\r\n\r\n    return (\r\n     \r\n    <div>\r\n       <h1>Оплати мобильную связь</h1>\r\n       \r\n        <Button data-key='МТС' onClick={this.chooseService}   >\r\n            <Img src={`http://puer18.ru/terminal_demo/images/0.png`} className=\"App-logo\" alt=\"MTC\" />  \r\n            <h2>MTC</h2>\r\n        </Button>\r\n\r\n        <Button data-key='Билайн' onClick={this.chooseService} >\r\n            <Img src={`http://puer18.ru/terminal_demo/images/1.png`} className=\"App-logo\" alt=\"Билайн\" />    \r\n            <h2>Билайн</h2>\r\n        </Button>\r\n\r\n        <Button  data-key='Мегафон' onClick={this.chooseService} >\r\n            <Img src={`http://puer18.ru/terminal_demo/images/2.png`} className=\"App-logo\" alt=\"Мегафон\" />  \r\n            <h2>Мегафон</h2>\r\n        </Button>\r\n\r\n\r\n    </div>);\r\n  }\r\n}\r\n\r\n\r\n/*\r\nexport class ButtonsDisplay extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = { choosePayment: '' };\r\n  }\r\n\r\n  render() {\r\n    return (<div className=\"App\">\r\n        {MobileService.map((place, index) => ( \r\n            <button className=\"button\" key={index} \r\n                onClick={(e) => {this.setState ({choosePayment: place.name })\r\n                console.log (this.state.choosePayment)\r\n            }}>\r\n            <img src={`/images/${index}.png`} className=\"App-logo\" alt=\"logo\" />\r\n            <h2>{place.name}</h2>\r\n            </button>))} \r\n        </div>);\r\n  }\r\n}\r\n\r\n      const MobileService = [\r\n  { name: \"МТС\", id : 0},\r\n  { name: \"Билайн\", id : 1},\r\n  { name: \"Мегафон\", id : 2}\r\n  //{ name: \"ТELE2\", id : 3}\r\n    ];\r\n\r\n\r\n       {MobileService.map((place, index) => (\r\n        <button className=\"button\" key={index} id={index} value={this.index}\r\n        onClick={this.chooseService}>\r\n            <img src={`/images/${index}.png`} className=\"App-logo\" alt=\"logo\" />\r\n            <h2>{place.name}</h2>\r\n      </button>))}\r\n\r\n*/\r\n\r\n","import React from 'react';\r\nimport { Pulse} from 'animate-css-styled-components';\r\nimport { Tada } from 'animate-css-styled-components';\r\n\r\nexport class WaitingServer extends React.Component {\r\n    \r\n    constructor() {\r\n        super();\r\n        this.state = {operationSuccess : \"loading\"};\r\n\r\n     \r\n        setTimeout(function () {           \r\n            if (this.props.sum.length>2) this.setState({ operationSuccess: 'true' });\r\n            if (this.props.sum.length<3) this.setState({ operationSuccess: 'false' });\r\n                }.bind(this), 3000 \r\n        );\r\n\r\n        clearTimeout ();\r\n        \r\n        setTimeout( function () {\r\n            if (this.props.sum.length<3) this.props.steps(-1, this.props.operator, this.state.phone, this.state.sum);\r\n            if (this.props.sum.length>2) this.props.steps(-2);\r\n            }.bind(this), 5000 \r\n        );\r\n\r\n          \r\n    };\r\n        /* \r\n        Здесь делаем запрос к API и по реультатам ответа присваиваем \r\n        operationSuccess ( по умолчанию loading) \"true\" или  \"false\",  но поскольку сервера нет - ставим заглушки и \r\n        имитируем работу удаленного сервера. Сумма 100 и более успешно, менее  100 -что-то не так.\r\n\r\n        componentDidMount() {\r\n            \r\n            fetch(\"http://localhost:8000\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/x-www-form-urlencoded'\r\n                  },\r\n                body: JSON.stringify({\r\n                     \"sum\": this.props.sum,\r\n                     \"phone\" : this.props.phone                     \r\n                    })\r\n                })\r\n                .then((response) => response.json())\r\n                .then((response) => { response\r\n                    // this.setState({ operationSuccess: response });      \r\n                })\r\n            } */\r\n \r\n    render () {\r\n        return (\r\n            <div className=\"App\">\r\n                <h3> Статус платежа по номеру: {this.props.phone}  </h3>\r\n                 \r\n                {this.state.operationSuccess == 'loading'  ?  <Waiting /> : \"\"} \r\n\r\n                {this.state.operationSuccess == 'true'  ? \r\n                    <Tada duration=\"0.5s\" delay=\"0.5s\"><h3>Всё успешно!</h3></Tada> : \"\"\r\n                }\r\n                \r\n                {this.state.operationSuccess == 'false' ?  \r\n                    <h3>Порпробуйте еще раз!</h3> : \"\"\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction Waiting () {\r\n    return (\r\n        \r\n            <Pulse duration=\"1s\" delay=\"1s\" iterationCount=\"3\">\r\n                <h3>Идет обработка вашего запроса...</h3>\r\n            </Pulse>\r\n        )\r\n  }\r\n\r\n \r\n\r\n","import React from 'react';\nimport styled from 'styled-components'\nimport { UserForm } from './UserForm';\nimport { ButtonsDisplay } from './ButtonsDisplay';\nimport { WaitingServer } from './WaitingServer';\n\nconst Header = styled.header`\n    background-color: #282c34;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: white;\n`\nconst AppWrapper = styled.div`\n    text-align: center;\n`\nclass App extends React.Component {\n    constructor() {\n        super()\n        this.state = { payActive: 1, operator: '', mobile: '', phone : '', sum : ''  }\n        this.nextPanel = this.nextPanel.bind(this)  \n    };\n\n    nextPanel (step, mobile, phone, sum) {\n        this.setState(prevState => {\n          return {\n          payActive: prevState.payActive + step\n          }\n        })\n        this.setState({operator : mobile, phone: phone, sum: sum }) \n    };\n  \n    render() {\n        return (\n            <AppWrapper >\n                <Header>\n                    {/*выбор оператора*/}\n                    {this.state.payActive== 1 ? < ButtonsDisplay steps={this.nextPanel} />  :  '' }\n\n                    {/*ввод данных в форму или на првый экран для смены оператора*/}\n                    {this.state.payActive== 2 ? < UserForm  steps={this.nextPanel} operator={this.state.operator} />  : '' }\n\n                    {/* ожидание ответа и возврат в шаг первый */}\n                    {this.state.payActive==  3 ? < WaitingServer \n                    steps={this.nextPanel}  operator={this.state.operator}\n                    phone={this.state.phone} sum={this.state.sum} />  : '' }\n                    \n                </Header>\n            </AppWrapper>\n       )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}